@using System.Reflection
@using System.Text
<h2>@ClassName</h2>
<button @onclick="RunTests">Run Class Tests</button>
<div class="result-section">
    @foreach (KeyValuePair<string, string> entry in _testResults)
    {
        MethodInfo methodInfo = _methodInfos!.First(mi => mi.Name == entry.Key);
        <h3>@entry.Key</h3>
        <button @onclick="@(() => RunTest(methodInfo))">Run Test</button>
        @((MarkupString)entry.Value)
    }
</div>

@code {
	[Parameter]
	public EventCallback<TestResult> OnTestResults { get; set; }

    public async Task RunTests()
    {
        ResultBuilder = new();

        _passed = 0;
		_failed = 0;

        foreach (MethodInfo method in _methodInfos!)
        {
            await RunTest(method);
        }

		await OnTestResults.InvokeAsync(new TestResult(ClassName, _passed, _failed));
    }

    protected override void OnInitialized()
    {
        _methodInfos = GetType()
            .GetMethods()
            .Where(m => m.GetCustomAttribute(typeof(TestMethodAttribute), false) != null)
            .ToArray();

        _testResults = _methodInfos.ToDictionary(m => m.Name, m => string.Empty);
    }

    private async Task RunTest(MethodInfo methodInfo)
    {
        ResultBuilder = new StringBuilder();
        try
        {
            await (Task)methodInfo.Invoke(this, null)!;
            ResultBuilder.AppendLine("<p style=\"color: green; font-weight: bold\">Passed</p>");
        	_passed++;
        }
        catch (Exception ex)
        {
            ResultBuilder.AppendLine($"<p style=\"color: red; font-weight: bold\">{(ex.Message.Replace(Environment.NewLine, "<br/>"))}</p>");
        	_failed++;
        }
        
        _testResults[methodInfo.Name] = ResultBuilder.ToString();
        StateHasChanged();
    }
    
    protected string ClassName => GetType().Name;
    protected StringBuilder ResultBuilder = new();
    private MethodInfo[]? _methodInfos;
    private Dictionary<string, string> _testResults = new();
    private int _passed;
    private int _failed;
}