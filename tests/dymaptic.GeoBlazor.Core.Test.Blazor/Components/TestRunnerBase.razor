@using ErrorEventArgs = dymaptic.GeoBlazor.Core.Test.Blazor.ErrorEventArgs
@using System.Runtime.ExceptionServices
@attribute [TestClass]
<div class="result-section">
    <h2>@ClassName</h2>
    <div @onclick="@(() => _collapsed = !_collapsed)" style="cursor: pointer; display: inline; font-weight: bold; color: white; padding: 5px; border-radius: 5px; margin-bottom: 5px;">@(_collapsed ? "\u25b6" : "\u25bc")</div>
    <button @onclick="RunTests">Run Class Tests</button>
    <p>
        @if (_running)
        {
            <span style="color: orange; font-weight: bold">Running...&nbsp;</span>
        }
        @if (_passed.Any() || _failed.Any())
        {
            <span style="color: green;">Passed: @_passed.Count,</span>
            <span style="color: red;">Failed: @_failed.Count</span>
        }
    </p>
    <div class="detail-results @(_collapsed ? "collapsed" : "")">
        @foreach (KeyValuePair<string, string> entry in _testResults)
        {
            MethodInfo methodInfo = _methodInfos!.First(mi => mi.Name == entry.Key);
            <h3>@entry.Key</h3>
            <div class="test-results-container">
                <div class="test-results-row">
                    <button @onclick="@(() => RunTest(methodInfo))">Run Test</button>
                    @((MarkupString)entry.Value)
                </div>
                @if (_testRenderFragments.TryGetValue(entry.Key, out RenderFragment? fragment))
                {
                    <ErrorHandler MethodName="@entry.Key" OnError="OnRenderError">
                        <ChildContent>
                            <div style="display: flex; justify-content: center; position: relative;">
                                <div style="position: absolute; top: -100px; right: 10px;">
                                    <MapView @ref="_mapViews[entry.Key]" OnViewRendered="@_mapViewRenderHandlers[entry.Key]" class="map-view">
                                        @fragment
                                    </MapView>
                                </div>
                            </div>
                        </ChildContent>
                        <ErrorContent></ErrorContent>
                    </ErrorHandler>
                }
            </div>
        }
    </div>
</div>

@code {
    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;

    [Parameter]
    public EventCallback<TestResult> OnTestResults { get; set; }

    public async Task RunTests()
    {
        _running = true;
        ResultBuilder = new StringBuilder();
        _passed.Clear();
        _failed.Clear();
        foreach (string key in _testResults.Keys)
        {
            _testResults[key] = string.Empty;
        }

        foreach (MethodInfo method in _methodInfos!)
        {
            await RunTest(method);
        }
        _running = false;
    }

    protected override void OnInitialized()
    {
        _methodInfos = GetType()
            .GetMethods()
            .Where(m => m.GetCustomAttribute(typeof(TestMethodAttribute), false) != null)
            .ToArray();

        _testResults = _methodInfos.ToDictionary(m => m.Name, _ => string.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _jsObjectReference ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./testRunner.js");
    }

    protected void AddMapRenderFragment(RenderFragment fragment,
        [CallerMemberName] string? methodName = null)
    {
        _mapViews[methodName!] = new MapView();
        _testRenderFragments[methodName!] = fragment;
    }

    protected MapView GetMapView([CallerMemberName] string? methodName = null)
    {
        return _mapViews[methodName!];
    }

    protected void CreateViewRenderedHandler(Func<Task>? asserts = null,
        [CallerMemberName] string? methodName = null, int renderCount = 0)
    {
        async Task Handler()
        {
            _methodRenderCount.TryGetValue(methodName!, out int currentCount);
            if (currentCount < renderCount)
            {
                _methodRenderCount[methodName!] = currentCount + 1;
                return;
            }
            try
            {
                MapView mapView = _mapViews[methodName!];
                Assert.IsNotNull(mapView);
                if (asserts is not null)
                {
                    await asserts();
                }

                _methodsWithRenderedMaps.Add(methodName!);
            }
            catch (Exception ex)
            {
                _mapRenderingExceptions[methodName!] = ex;
            }
        }

        _mapViewRenderHandlers[methodName!] = Handler;
    }

    protected async Task WaitForMapToRender([CallerMemberName] string? methodName = null, bool cleanupFragment = true)
    {
        await InvokeAsync(StateHasChanged);
        var tries = 300;
        while (!_methodsWithRenderedMaps.Contains(methodName!) && (tries > 0))
        {
            if (_mapRenderingExceptions.TryGetValue(methodName!, out Exception? ex))
            {
                _mapRenderingExceptions.Remove(methodName!);
                ExceptionDispatchInfo.Capture(ex).Throw();
            }
            await Task.Delay(100);
            tries--;
        }

        Assert.IsTrue(_methodsWithRenderedMaps.Contains(methodName!));
        _methodsWithRenderedMaps.Remove(methodName!);
        if (cleanupFragment)
        {
            await _mapViews[methodName!].DisposeAsync();
            _testRenderFragments.Remove(methodName!);
        }
    }

    protected async Task AssertJavaScript(string jsAssertFunction, [CallerMemberName] string? methodName = null, params object[] args)
    {
        List<object> jsArgs = new() { _mapViews[methodName!].Id };
        jsArgs.AddRange(args);
        await _jsObjectReference!.InvokeVoidAsync(jsAssertFunction, jsArgs.ToArray());
    }

    private async Task RunTest(MethodInfo methodInfo)
    {
        _testResults[methodInfo.Name] = "<p style=\"color: orange; font-weight: bold\">Running...</p>";
        ResultBuilder = new StringBuilder();
        _passed.Remove(methodInfo.Name);
        _failed.Remove(methodInfo.Name);
        _testRenderFragments.Remove(methodInfo.Name);
        _mapViews.Remove(methodInfo.Name);
        _mapRenderingExceptions.Remove(methodInfo.Name);
        _mapViewRenderHandlers.Remove(methodInfo.Name);
        _methodsWithRenderedMaps.Remove(methodInfo.Name);
        _methodRenderCount.Remove(methodInfo.Name);
        try
        {
            await (Task)methodInfo.Invoke(this, null)!;
            _passed[methodInfo.Name] = ResultBuilder.ToString();
            ResultBuilder.AppendLine("<p style=\"color: green; font-weight: bold\">Passed</p>");
        }
        catch (Exception ex)
        {
            _failed[methodInfo.Name] = $"{ResultBuilder}{Environment.NewLine}{ex.StackTrace}";
            ResultBuilder.AppendLine($"<p style=\"color: red; font-weight: bold\">{ex.Message.Replace(Environment.NewLine, "<br/>")}<br/>{ex.StackTrace?.Replace(Environment.NewLine, "<br/>")}</p>");
        }

        _testResults[methodInfo.Name] = ResultBuilder.ToString();
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await OnTestResults.InvokeAsync(new TestResult(ClassName, _passed, _failed));
        });
    }

    private void OnRenderError(ErrorEventArgs arg)
    {
        _mapRenderingExceptions[arg.MethodName] = arg.Exception;
    }

    private string ClassName => GetType().Name;
    protected StringBuilder ResultBuilder = new();
    private MethodInfo[]? _methodInfos;
    private Dictionary<string, string> _testResults = new();
    private bool _collapsed = true;
    private bool _running;
    private IJSObjectReference? _jsObjectReference;
    private readonly Dictionary<string, RenderFragment> _testRenderFragments = new();
    private readonly Dictionary<string, MapView> _mapViews = new();
    private readonly List<string> _methodsWithRenderedMaps = new();
    private readonly Dictionary<string, Exception> _mapRenderingExceptions = new();
    private readonly Dictionary<string, string?> _passed = new();
    private readonly Dictionary<string, string?> _failed = new();
    private readonly Dictionary<string, Func<Task>> _mapViewRenderHandlers = new();
    private readonly Dictionary<string, int> _methodRenderCount = new();
}