@page "/popup-actions"
@inject GeometryEngine GeometryEngine

<PageTitle>Popup Actions</PageTitle>
<h1>Popups</h1>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/display-a-pop-up/">ArcGIS API for JavaScript</a>
    <a class="btn btn-primary" target="_blank" href="https://www.arcgis.com/home/item.html?id=f35ef07c9ed24020aadd65c8a65d3754">Modern Antique BaseMap</a>
</div>
<p class="instructions">
    Use the radio buttons to toggle features with three different types of popups.
    Once the features are rendered, click on a feature to see the popup.
</p>
<p class="instructions" style="color: var(--geoblazor-primary);">
    This sample currently uses code from our <a target="_blank" href="https://www.geoblazor.com/#beta-popup">GeoBlazor Pro</a> extensions library.
    <br/>
    For more information about licensing these advanced features, contact <a href="mailto:info@dymaptic.com">info@dymaptic.com</a>.
</p>

<MapView @ref="MapView" OnMapRendered="OnMapRendered" 
         Center="new Point(-117.08, 34.1)" Zoom="11" Class="map-view">
    <Map>
        <Basemap>
            <PortalItem Id="f35ef07c9ed24020aadd65c8a65d3754" />
        </Basemap>
        <FeatureLayer Url="https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/TrailRuns/FeatureServer/0">
            <PopupTemplate Title="Trail Run" StringContent="{name}">
                <ActionButton Image="_content/dymaptic.GeoBlazor.Core.Sample.Shared/images/Measure_Distance16.png"
                              Title="Measure Length"
                              Id="measure-this"
                              CallbackFunction="MeasureThis" />
            </PopupTemplate>
        </FeatureLayer>
    </Map>
</MapView>

@code {
    private MapView? MapView { get; set; }

    private async Task OnMapRendered()
    {
        _popup = await MapView!.GetPopupWidget();
    }
    
    private async Task MeasureThis()
    {
        Graphic selectedFeature = await _popup!.GetSelectedFeature();
        Geometry geom = selectedFeature.Geometry!;
        double initDistance = await GeometryEngine.GeodesicLength(geom, LinearUnit.Miles);
        var distance = (Math.Round(initDistance * 100) / 100).ToString("F2");
        await _popup.SetContent($"{selectedFeature.Attributes?["name"]}<div style='background-color:DarkGray;color:white'>{distance} miles.</div>");
    }

    private PopupWidget? _popup;
}