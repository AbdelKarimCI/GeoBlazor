@page "/server-side-queries"
<PageTitle>Server Side Queries</PageTitle>
<h1>Server Side Queries</h1>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#hitTest">ArcGIS API for JavaScript Reference</a>
    <a class="btn btn-primary" target="_blank" href="https://www.arcgis.com/apps/mapviewer/index.html?url=https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer">Hurricanes</a>
</div>
<p class="instructions">
    Hover over a line on the map, and the "Hit Test" will return the hurricane name, category, and wind speed (knots).
</p>

<MapView @ref="_mapView"
         Class="map-view" 
         OnClick="OnClick"
         OnMapRendered="OnMapRendered">
    <Map ArcGISDefaultBasemap="gray-vector">
        <FeatureLayer @ref="_featureLayer" OutFields="@(new []{"*"})">
            <PortalItem Id="234d2e3f6f554e0e84757662469c26d3" />
        </FeatureLayer>
    </Map>
    <Extent Xmax="-13620669.8431"
            Xmin="-13640432.281"
            Ymax="4556710.618000001"
            Ymin="4536523.6511999965">
        <SpatialReference Wkid="102100" />
    </Extent>
    <PopupWidget AutoOpenEnabled="false">
        <PopupDockOptions ButtonEnabled="false"
                          BreakPoint="@(new BreakPoint(false))"
                          Position="PopupDockPosition.BottomRight" />
    </PopupWidget>
    <LegendWidget Position="OverlayPosition.BottomLeft">
        <LayerInfo Layer="_featureLayer" />
    </LegendWidget>
    <CustomOverlay Position="OverlayPosition.TopRight">
        <div id="optionsDiv" class="esri-widget">
            <p>
                Select a query type and click a point on the map to view the results.
            </p>
            <select id="query-type" @bind="_queryType" class="esri-widget">
                <option value="basic">Basic Query</option>
                <option value="distance">Query By Distance</option>
            </select>
        </div>
    </CustomOverlay>
</MapView>

<Graphic @ref="_pointGraphic">
    <SimpleMarkerSymbol Color="@(new MapColor(0, 0, 139))">
        <Outline Color="@(new MapColor(255, 255, 255))" Width="1.5" />
    </SimpleMarkerSymbol>
</Graphic>

<Graphic @ref="_bufferGraphic">
    <SimpleFillSymbol Color="@(new MapColor(173, 216, 230, 0.2))">
        <Outline Color="@(new MapColor(255, 255, 255))" Width="1" />
    </SimpleFillSymbol>
</Graphic>

@code {
    private async Task OnMapRendered()
    {
        if (!_extentSet && _featureLayer?.FullExtent is not null)
        {
            _extentSet = true;
            // await _featureLayer.RegisterChildComponent(await _featureLayer.CreatePopupTemplate());
        }
    }
    
    private async Task OnClick(ClickEvent clickEvent)
    {
        await _mapView!.ClearGraphics();
        Query query = new Query
        {
            Geometry = clickEvent.MapPoint,
            Distance = Distance,
            Units = Unit,
            SpatialRelationship = SpatialRelationship.Intersects,
            ReturnGeometry = false,
            ReturnQueryGeometry = true,
            OutFields = new HashSet<string>{ "*" }
        };
        FeatureSet result = await _featureLayer!.QueryFeatures(query);
        await _pointGraphic!.RegisterChildComponent(clickEvent.MapPoint);
        await _mapView.AddGraphic(_pointGraphic);
        await _mapView.OpenPopup(new PopupOpenOptions
        {
            Location = clickEvent.MapPoint,
            Features = result.Features,
            FeatureMenuOpen = true
        });

        if (result.QueryGeometry is not null)
        {
            await _bufferGraphic!.RegisterChildComponent(result.QueryGeometry);
            await _mapView.AddGraphic(_bufferGraphic!);
        }
    }
    
    private double? Distance => _queryType == "distance" ? 0.5 : null;
    private LinearUnit? Unit => _queryType == "distance" ? LinearUnit.Miles : null;
    private MapView? _mapView;
    private FeatureLayer? _featureLayer;
    private Graphic? _pointGraphic;
    private Graphic? _bufferGraphic;
    private string? _queryType;
    private bool _extentSet;
}