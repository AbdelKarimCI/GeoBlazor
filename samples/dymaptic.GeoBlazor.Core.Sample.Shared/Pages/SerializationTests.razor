@page "/serialization-tests"
@using System.Text.Json.Serialization
@inject IJSRuntime JsRuntime

<h1>SerializationTests</h1>
<button @onclick="SendJson">Send JSON Serialization</button>
<button @onclick="SendJsonStream">Send JSON Stream Serialization</button>
<button @onclick="SendProtobufStream">Send Protobuf Stream Serialization</button>
@code {
    protected override void OnInitialized()
    {
        _graphics = GenerateGraphics();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _arcGisJsInterop = await JsRuntime.InvokeAsync<IJSObjectReference>("import", 
                "./_content/dymaptic.GeoBlazor.Core/js/arcGisJsInterop.js");
            await _arcGisJsInterop.InvokeVoidAsync("loadProtobuf");
        }
    }

    private async Task SendJson()
    {
        long unixTimeMilliseconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        await _arcGisJsInterop!.InvokeVoidAsync("getFromJson", _graphics, unixTimeMilliseconds);
    }
    
    private async Task SendJsonStream()
    {
        JsonSerializerOptions options = new()
        {
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            PropertyNameCaseInsensitive = true
        };
        long unixTimeMilliseconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        MemoryStream ms = new MemoryStream(JsonSerializer.SerializeToUtf8Bytes(_graphics, options));
        DotNetStreamReference streamRef = new(ms);
        await _arcGisJsInterop!.InvokeVoidAsync("getFromJsonStream", streamRef, unixTimeMilliseconds);
    }

    private async Task SendProtobufStream()
    {
        // List<Dymaptic.GeoBlazor.Core.Proto.Graphic> protoGraphics = _graphics!.Select(CreateProtoGraphic).ToList();
        // GraphicArray array = new GraphicArray();
        // array.Graphics.AddRange(protoGraphics);
        // long unixTimeMilliseconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        // var ms = new MemoryStream();
        // array.WriteTo(ms);
        // ms.Seek(0, SeekOrigin.Begin);
        // DotNetStreamReference streamRef = new(ms);
        // await _arcGisJsInterop!.InvokeVoidAsync("getFromProtobufStream", streamRef, unixTimeMilliseconds);
    }
    

    private List<GraphicSerializationRecord> GenerateGraphics()
    {
        List<Components.Layers.Graphic> graphics = new();
        for (var i = 0; i < 100_000; i++)
        {
            graphics.Add(new Components.Layers.Graphic(new Point(_random.NextDouble() * 10 + 11.0, 
                _random.NextDouble() * 10 + 50.0)));
        }

        return graphics.Select(g => g.ToSerializationRecord()).ToList();
    }
    
    
    private readonly Random _random = new();
    private List<GraphicSerializationRecord>? _graphics;
    private IJSObjectReference? _arcGisJsInterop;
}