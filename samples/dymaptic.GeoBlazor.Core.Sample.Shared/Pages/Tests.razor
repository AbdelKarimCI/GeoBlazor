@page "/tests"
<PageTitle>Tests</PageTitle>

<h1>Tests</h1>
<h2>Code Layers</h2>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_localFeatureLayer)">Local Feature Layer</button>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_remoteFeatureLayer)">Server Feature Layer</button>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_graphicsLayer)">Graphics Layer</button>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_geoJsonLayer)">GeoJSON Layer</button>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_geoRssLayer)">GeoRSS Layer</button>
<button disabled="@(!_mapRendered)" @onclick="() => ToggleLayer(_osmLayer)">OpenStreetMaps Layer</button>
<h2>Markup Layers</h2>
<button disabled="@(!_mapRendered)" @onclick="() => _showGraphicsMarkupLayer = !_showGraphicsMarkupLayer">Graphics Layer</button>

<MapView @ref="_view" class="map-view" OnMapRendered="OnMapRendered">
    <Extent Xmin="-41525513" Ymin="4969181" Xmax="-36687355" Ymax="9024624">
        <SpatialReference Wkid="102100" />
    </Extent>
    <Map ArcGISDefaultBasemap="arcgis-topographic">
        @if (_showGraphicsMarkupLayer)
        {
            <GraphicsLayer>
                @for (var i = 0; i < 10; i++)
                {
                    double lat = _lats[i];
                    double lon = _longs[i];
                    <Graphic>
                        <Point Longitude="@lon" Latitude="@lat" />
                        <SimpleMarkerSymbol Color="@(new MapColor("red"))" Size="6">
                            <Outline Color="@(new MapColor("white"))" />
                        </SimpleMarkerSymbol>
                    </Graphic>
                }
            </GraphicsLayer>
        }
    </Map>
</MapView>

<br />

<h2>Extent Test Map</h2>
<MapView Class="map-view" OnExtentChanged="OnExtentChanged">
    <Extent Xmax="-13165385.47351927" Xmin="-13288754.837171592"
            Ymax="4061566.0769513007" Ymin="4015703.859980177">
        <SpatialReference Wkid="102100" />
    </Extent>
    <Map ArcGISDefaultBasemap="arcgis-navigation">
    </Map>
</MapView>

<h2>MapRendered Test Map</h2>
<MapView @ref="_view3" Style="height: 600px; width: 100%;" OnMapRendered="OnMap3Rendered" OnClick="On3Click">
    <Map ArcGISDefaultBasemap="arcgis-navigation">
    </Map>
    <Extent Xmax="4120960.074670904" Xmin="-3412935.278412999" Ymax="8963926.222211033" Ymin="6049459.93475111">
        <SpatialReference Wkid="102100" />
    </Extent>

</MapView>

<h2>Spatial Ref from FeatureLayer Test Map</h2>
<MapView Style="height: 600px; width: 100%;">
    <Map ArcGISDefaultBasemap="arcgis-navigation">
        <FeatureLayer Url="https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0" />
    </Map>
    <Extent Xmax="4120960.074670904" Xmin="-3412935.278412999" Ymax="8963926.222211033" Ymin="6049459.93475111">
        <SpatialReference Wkid="3857" />
    </Extent>

</MapView>

<h2>Delayed Render with Graphics</h2>
<MapView @ref="_delayedMapView" Style="height: 600px; width: 100%;">
    <Extent Xmin="-41525513" Ymin="4969181" Xmax="-36687355" Ymax="9024624">
            <SpatialReference Wkid="102100" />
    </Extent>
    <Map>
        <OpenStreetMapLayer />
        <GraphicsLayer @ref="_delayedGraphicsLayer" />
    </Map>
</MapView>
<button @onclick="AddGraphicsToView">Add Graphics To View</button>
<button @onclick="AddGraphicsToLayer">Add Graphics To Layer</button>
<button @onclick="ClearGraphics">Clear Graphics</button>

<h2>Enterprise-Hosted Layer Test</h2>
<MapView Style="height: 600px; width: 100%;">
    <Extent Xmax="-12316914.7038" Xmin="-14596572.5354" Ymax="6562278.17835" Ymin="4992526.63148">
        <SpatialReference Wkid="102100" />
    </Extent>
    <Map ArcGISDefaultBasemap="arcgis-topographic">
        <FeatureLayer>
            <PortalItem Id="a07b8cd0b3514285ab1ff001befd2288">
                <Portal Url="https://arcgis.dymaptic.com/portal/" />
            </PortalItem>
            <PopupTemplate Title="Details" StringContent="<p>State: {state}</p><p><a href='{image_url}'>Image</a></p>" />
        </FeatureLayer>
    </Map>
</MapView>

@code {

    private void OnMapRendered()
    {
        _mapRendered = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _lats.Clear();
        _longs.Clear();
        for (var i = 0; i < 10; i++)
        {
            _lats.Add(_random.NextDouble() * 10 + 50.0);
            _longs.Add(_random.NextDouble() * 10 + 11.0);
        }
    }

    private async Task AddGraphicsToView()
    {
        List<Graphic> graphics = new();
        for (var i = 0; i < 10_000; i++)
        {
            graphics.Add(new Graphic(new Point(_random.NextDouble() * 10 + 11.0, 
                _random.NextDouble() * 10 + 50.0), new SimpleMarkerSymbol(
                    new Outline(new MapColor("green")), new MapColor("red"), 10),
                new PopupTemplate("Test", "Test Content<br/>{testString}<br/>{testNumber}", new []{"*"}),
                new Dictionary<string, object> { { "testString", "test" }, { "testNumber", 123 } }));
        }
        await _delayedMapView!.AddGraphics(graphics);
    }

    private async Task AddGraphicsToLayer()
    {
        List<Graphic> graphics = new();
        for (var i = 0; i < 10_000; i++)
        {
            graphics.Add(new Graphic(new Point(_random.NextDouble() * 10 + 11.0, 
                _random.NextDouble() * 10 + 50.0), new SimpleMarkerSymbol(
                    new Outline(new MapColor("green")), new MapColor("red"), 10),
                new PopupTemplate("Test", "Test Content<br/>{testString}<br/>{testNumber}", new []{"*"}),
                new Dictionary<string, object> { { "testString", "test" }, { "testNumber", 123 } }));
        }
        await _delayedGraphicsLayer!.Add(graphics);
    }

    private async Task ClearGraphics()
    {
        await _delayedGraphicsLayer!.Clear();
        await _delayedMapView!.ClearGraphics();
    }

    private Task OnExtentChanged(Extent extent)
    {
        return Task.CompletedTask;
    }

    private async Task ToggleLayer(Layer layer)
    {
        if (_view!.Map!.Layers.Contains(layer))
        {
            await _view.RemoveLayer(layer);
        }
        else
        {
            await _view.AddLayer(layer);
        }
    }

    private MapView? _view;
    private readonly FeatureLayer _localFeatureLayer = new(source: new[]
    {
        new Graphic(new Point(11.967162, 49.201448),
            new SimpleMarkerSymbol(new Outline(new MapColor("white")),
                new MapColor("red"), 6))
    },
        objectIdField: "OBJECTID");
    private readonly FeatureLayer _remoteFeatureLayer =
        new("https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/weather_stations_010417/FeatureServer/0");
    private readonly GraphicsLayer _graphicsLayer = new(new[]
    {
        new Graphic(new Point(11.888650, 52.451825),
            new SimpleMarkerSymbol(new Outline(new MapColor("white")),
                new MapColor("green"), 6)),
        new Graphic(new PolyLine(new[]
        {
            new MapPath(new MapPoint(11, 52),
                new MapPoint(11.5, 53),
                new MapPoint(12, 55),
                new MapPoint(10, 55),
                new MapPoint(10.5, 51),
                new MapPoint(11, 56))
        }),
            new SimpleLineSymbol(new MapColor("blue"), 2)),
        new Graphic(new Point(7.274721, 59.614991),
            new PictureMarkerSymbol("https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",
                height: 15, width: 15)),
        new Graphic(new Point(29.437639, 55.469513),
            new TextSymbol("Hello World", new MapColor("red"),
                new MapColor("yellow"), 12))
    });

    private async void On3Click(ClickEvent clickEvent)
    {
        await _view3!.SetExtent(
            new Extent(4120960.074670904, -3412935.278412999, 8963926.222211033, 6049459.93475111));
    }

    private void OnMap3Rendered()
    {
        if (!_map3Rendered)
        {
            _map3Rendered = true;
        }
    }

    private readonly GeoJSONLayer _geoJsonLayer =
        new("https://services3.arcgis.com/GVgbJbqm8hXASVYi/ArcGIS/rest/services/World_Countries_(Generalized)/FeatureServer/0/query?where=1%3D1&outFields=*&f=geojson");
    private readonly GeoRSSLayer _geoRssLayer =
        new("https://disasterscharter.org/charter-portlets/cpi-mvc/activations/feed/rss/");
    private readonly OpenStreetMapLayer _osmLayer = new();

    private bool _mapRendered;
    private bool _map3Rendered;
    private bool _showGraphicsMarkupLayer;
    private readonly Random _random = new();
    private readonly List<double> _lats = new();
    private readonly List<double> _longs = new();
    private MapView? _view3;
    private MapView? _delayedMapView;
    private GraphicsLayer? _delayedGraphicsLayer;
    private bool _delayedMapSet;
}