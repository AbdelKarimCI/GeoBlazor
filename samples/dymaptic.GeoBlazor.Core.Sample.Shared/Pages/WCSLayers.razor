@page "/wcslayers"
@using dymaptic.GeoBlazor.Core.Components.Renderers.ColorRamps;

<h3>WCS Layers</h3>

<div class="links-div">
    <a class="btn btn-secondary" target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html">ArcGIS API for JavaScript</a>
    <a class="btn btn-primary" target="_blank" href="something">NOAA Sea Surface Temperature Charts</a>
</div>
<Label>Add the sample WCS Layer URL to see a visualization of global sea surface temperature data:</Label>
<InputText @bind-Value="_wcsLayerUrl"></InputText>
<button disabled="@(!_mapRendered)" @onclick="(()=>AddRemoveWCSLayer())">Add the WCS Layer with color ramp enabled</button>
<button disabled="@(!_mapRendered)" @onclick="(()=>_markup = !_markup)">Add new WCS Layer in Markup without colorizing</button>

<MapView @ref="_view" class="map-view" OnMapRendered="OnMapRendered" Scale="0">
    <Map ArcGISDefaultBasemap="arcgis-light-gray">
        @if (_markup)
        {
            <WCSLayer Url="https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer?request=GetCapabilities&service=WCS"></WCSLayer>
        }


    </Map>
</MapView>

@code {



    private void OnMapRendered() => _mapRendered = true;

    public async Task AddRemoveWCSLayer()
    {
        WCSLayer wcsSampleLayer = new()
            {
                Url = _wcsLayerUrl,
                Renderer = CreateRenderer(),
                MultidimensionalDefinition = CreateDimensionalDefinition(),
                Opacity = 0.5,
                Title = "Sea temperature - sea level"
            };

        if (!_view.Map.Layers.Any())
        {
            await _view.AddLayer(wcsSampleLayer);

        }
        else
        {
            _view.Map.Layers.Clear();
        }
        _view.Refresh();

    }

    public List<DimensionalDefinition> CreateDimensionalDefinition()
    {
        // initializes the dimensional filter for the raster display
        List<DimensionalDefinition>? multidimensionalDefinition = new()
            {
                new()
                {
                    VariableName = "water_temp", // water temp at sea level
                    DimensionName = "StdZ",
                    Values = new List<int> { 0 }
                }

            };
        return multidimensionalDefinition;
    }


    public RasterStretchRenderer CreateRenderer()
    {
        // This initializes the renderer as a standard deviation type
        var displayRenderer = new RasterStretchRenderer
            {

                StretchType = StretchType.StandardDeviation,
                Statistics = new List<List<int>>{ new List<int> { -3, 37, 1, 1 } },
                NumberOfStandardDeviations = 3
            };

        var toFromColor1 = new AlgorithmicColorRamp
            {
                FromColor = new MapColor( 0, 0, 255 ),
                ToColor = new MapColor ( 0, 255, 255 )
            };
        //multipartColorRamp.ColorRamps?.Append(toFromColor1);
        var toFromColor2 = new AlgorithmicColorRamp
            {
                FromColor = new MapColor ( 0, 255, 255 ),
                ToColor = new MapColor ( 255, 255, 0 )
            };
        //multipartColorRamp.ColorRamps?.Append(toFromColor2);
        var toFromColor3 = new AlgorithmicColorRamp
            {
                FromColor = new MapColor ( 255, 255, 0 ),
                ToColor = new MapColor ( 255, 0, 0 )
            };
        //multipartColorRamp.ColorRamps?.Append(toFromColor3);

        // Builds the multipart color ramp
        var colorRamp = new MultipartColorRamp
            {
                AlgorithmicColorRamps = new AlgorithmicColorRamp[]
                {
                    toFromColor1,
                    toFromColor2,
                    toFromColor3
                }
            };

        // initializes the colorRamp for the renderer, the color ramp contains the type and specific colorizing details from the MultipartColorRamp collection for the renderer
        // var colorRamp = new ColorRamp
        //     {

        //         ColorRamps = multipartColorRamp

        //     };
        //finalizes the renderer with all the color ramp values
        //displayRenderer.ColorRamp = colorRamp;
        displayRenderer.ColorRamp = colorRamp;
        return displayRenderer;
    }

    private AlgorithmicColorRamp[]? _colorRampsList;
    private MultipartColorRamp? multipartColorRamp;

    

    private MapView _view;
    private bool _markup = false;
    private bool _visible = false;
    private bool _mapRendered = false;


    //private string _wcsLayerUrl = "https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer";
    private string _wcsLayerUrl2 = "https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer";
    private string _wcsLayerUrl = "https://sampleserver6.arcgisonline.com/arcgis/services/ScientificData/SeaTemperature/ImageServer/WCSServer?request=GetCapabilities&service=WCS";
}