@page "/proto-tests"
@using System.Diagnostics
<PageTitle>Tests</PageTitle>

<h1>ProtoBuf Serialization Tests</h1>

<label>Number of Graphics: <input @bind="_numberOfGraphics" /></label>
<label>Chunk Size: <input @bind="_chunkSize" /></label>
<h2>Delayed Render with Graphics</h2>
<label>Elapsed Milliseconds for Render: @_elapsedTime</label>
<MapView @ref="_delayedMapView" Style="height: 600px; width: 100%;" GraphicSerializationChunkSize="_chunkSize">
    <Extent Xmin="-41525513" Ymin="4969181" Xmax="-36687355" Ymax="9024624">
            <SpatialReference Wkid="102100" />
    </Extent>
    <Map>
        <OpenStreetMapLayer />
        <GraphicsLayer @ref="_delayedGraphicsLayer" />
    </Map>
</MapView>
<button @onclick="AddGraphicsToView">Add Graphics To View</button>
<button @onclick="AddGraphicsToLayer">Add Graphics To Layer</button>
<button @onclick="ClearGraphics">Clear Graphics</button>

@code {

    private async Task AddGraphicsToView()
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        _stopwatch.Restart();
        _elapsedTime = 0;
        List<Graphic> graphics = new();
        for (var i = 0; i < _numberOfGraphics; i++)
        {
            graphics.Add(new Graphic(new Point(_random.NextDouble() * 10 + 11.0, 
                _random.NextDouble() * 10 + 50.0), new SimpleMarkerSymbol(
                    new Outline(new MapColor("green")), new MapColor("red"), 10),
                new PopupTemplate("Test", "Test Content<br/>{testString}<br/>{testNumber}", new []{"*"}),
                new Dictionary<string, object> { { "testString", "test" }, { "testNumber", 123 } }));
        }
        await _delayedMapView!.AddGraphics(graphics, _cts.Token);
        _stopwatch.Stop();
        _elapsedTime = _stopwatch.ElapsedMilliseconds;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddGraphicsToLayer()
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        _stopwatch.Restart();
        _elapsedTime = 0;
        List<Graphic> graphics = new();
        for (var i = 0; i < _numberOfGraphics; i++)
        {
            graphics.Add(new Graphic(new Point(_random.NextDouble() * 10 + 11.0, 
                _random.NextDouble() * 10 + 50.0), new SimpleMarkerSymbol(
                    new Outline(new MapColor("green")), new MapColor("red"), 10),
                new PopupTemplate("Test", "Test Content<br/>{testString}<br/>{testNumber}", new []{"*"}),
                new Dictionary<string, object> { { "testString", "test" }, { "testNumber", 123 } }));
        }
        await _delayedGraphicsLayer!.Add(graphics);
        _stopwatch.Stop();
        _elapsedTime = _stopwatch.ElapsedMilliseconds;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearGraphics()
    {
        _cts.Cancel();
        _cts = new CancellationTokenSource();
        await _delayedGraphicsLayer!.Clear();
        await _delayedMapView!.ClearGraphics();
    }

   
    private readonly Random _random = new();
    private MapView? _delayedMapView;
    private GraphicsLayer? _delayedGraphicsLayer;
    private int _numberOfGraphics = 10_000;
    private int _chunkSize = 100;
    private Stopwatch _stopwatch = new();
    private long _elapsedTime;
    private CancellationTokenSource _cts = new();
}