@page "/"

@inject IConfiguration Configuration
@inject IHostApplicationLifetime HostApplicationLifetime
@inject IJSRuntime JsRuntime

<h1>Unit Tests</h1>
<button @onclick="RunTests">Run All Tests</button>
<button @onclick="ToggleAll">@(_showAll ? "Collapse" : "Expand") All</button>
<div class="result-section">
    @if (_running)
    {
        <span style="color: orange; font-weight: bold">Running...&nbsp;</span>
    }
    else if (_results.Any())
    {
        <span style="color: orange; font-weight: bold">Complete</span>
    }
    @foreach (KeyValuePair<string, TestResult> result in _results.OrderBy(kvp => kvp.Key))
    {
        <p style="cursor: pointer;" @onclick="@(() => ScrollAndOpenClass(result.Key))">
            <a>
                <b>@Extensions.CamelCaseToSpaces(result.Key) - @((MarkupString)$"<span style=\"color: green;\">Passed: {result.Value.Passed.Count},</span> <span style=\"color: red;\">Failed: {result.Value.Failed.Count}</span>")</b>
            </a>
        </p>
    }
</div>

@foreach (Type type in _testClassTypes)
{
    Dictionary<string, object> parameters = new()
    {
        { "OnTestResults", EventCallback.Factory.Create<TestResult>(this, OnTestResults) }
    };
    
    <DynamicComponent Type="@type" @ref="_testClasses[type.Name]" Parameters="@parameters" />
}

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FindAllTests();

            if (Configuration["runOnStart"] == "true")
            {
                await RunTests();
                HostApplicationLifetime.StopApplication();
            }
        }

        _jsObjectReference ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/dymaptic.GeoBlazor.Core.Test.Blazor.Shared/testRunner.js");
    }

    private void FindAllTests()
    {
        var assembly = Assembly.GetExecutingAssembly();
        Type[] types = assembly.GetTypes();
        try
        {
            var proAssembly = Assembly.Load("dymaptic.GeoBlazor.Pro.Test.Blazor.Shared");
            types = types.Concat(proAssembly.GetTypes()
                .Where(t => t.Name != "ProTestRunnerBase")).ToArray();
        }
        catch
        {
            //ignore if not running pro
        }
        foreach (Type type in types)
        {
            if (type.IsDefined(typeof(TestClassAttribute), true) && (type.Name != nameof(TestRunnerBase)))
            {
                _testClassTypes.Add(type);
                _testClasses[type.Name] = null;
            }
        }
        StateHasChanged();
    }

    private async Task RunTests()
    {
        _running = true;
        _results.Clear();
        List<Task> runnerTasks = new();
        foreach (KeyValuePair<string, DynamicComponent?> kvp in _testClasses)
        {
            if (kvp.Value != null)
            {
                runnerTasks.Add(Task.Run(async () => await (kvp.Value!.Instance as TestRunnerBase)!.RunTests()));
            }
        }
        await Task.WhenAll(runnerTasks);
        _running = false;
        await InvokeAsync(StateHasChanged);
        var resultBuilder = new StringBuilder($@"
# GeoBlazor Unit Test Results
{DateTime.Now}
Passed: {_results.Values.Select(r => r.Passed.Count).Sum()}
Failed: {_results.Values.Select(r => r.Failed.Count).Sum()}");
        foreach (KeyValuePair<string, TestResult> result in _results)
        {
            resultBuilder.AppendLine($@"
## {result.Key}
Passed: {result.Value.Passed.Count}
Failed: {result.Value.Failed.Count}");
            foreach (KeyValuePair<string, string?> methodResult in result.Value.Passed)
            {
                resultBuilder.AppendLine($@"### {methodResult.Key} - Passed
{methodResult.Value}");
            }
        }
        Console.WriteLine(resultBuilder.ToString());
    }

    private async Task OnTestResults(TestResult result)
    {
        _results[result.ClassName] = result;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleAll()
    {
        _showAll = !_showAll;
        foreach (DynamicComponent? component in _testClasses.Values)
        {
            var testClass = (TestRunnerBase)component!.Instance!;
            testClass.Toggle(_showAll);
        }
    }

    private async Task ScrollAndOpenClass(string className)
    {
        await _jsObjectReference!.InvokeVoidAsync("scrollToTestClass", className);
        var testClass = (TestRunnerBase)_testClasses[className]!.Instance!;
        testClass.Toggle(true);
    }

    private IJSObjectReference? _jsObjectReference;
    private bool _running;
    private readonly List<Type> _testClassTypes = new();
    private readonly Dictionary<string, DynamicComponent?> _testClasses = new();
    private readonly Dictionary<string, TestResult> _results = new();
    private bool _showAll;
}