@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanAddPointGraphicToViewInMarkup()
    {
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 }));

        AddMapRenderFragment(
            @<div>
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <Graphic Attributes="_attributes">
                    <Point Latitude="100" Longitude="12" />
                    <SimpleMarkerSymbol Color="@(new MapColor("green"))">
                        <Outline Color="@(new MapColor("red"))" Width="2" />
                    </SimpleMarkerSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>
            </div>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddPolyLineGraphicToViewInMarkup()
    {
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 }));

        AddMapRenderFragment(
            @<div>
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <Graphic Attributes="_attributes">
                    <PolyLine Paths="_paths" />
                    <SimpleLineSymbol Color="@(new MapColor("ffffff"))"></SimpleLineSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>
            </div>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddPolygonGraphicToViewInMarkup()
    {
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 }));

        AddMapRenderFragment(
            @<div>
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <Graphic Attributes="_attributes">
                    <Polygon Rings="_rings" />
                    <SimpleFillSymbol Color="@(new MapColor("ffffff"))">
                        <Outline Color="@(new MapColor("black"))" Width="2" />
                    </SimpleFillSymbol>
                    <PopupTemplate Title="{Name}" StringContent="{Description}" />
                </Graphic>
            </div>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddMultipleGraphicsToViewInMarkup()
    {
        CreateViewRenderedHandler(async () =>
        {
            await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
            await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 });
            await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 });
        });

        AddMapRenderFragment(
            @<div>
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
                <Graphic>
                    <Point Latitude="100" Longitude="12" />
                </Graphic>
                <Graphic>
                    <PolyLine Paths="_paths" />
                </Graphic>
                <Graphic>
                    <Polygon Rings="_rings" />
                </Graphic>
            </div>);

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddPointGraphicToViewInCode()
    {
        CreateViewRenderedHandler();
        AddMapRenderFragment(@<Map ArcGISDefaultBasemap="arcgis-imagery" />);
        await WaitForMapToRender(cleanupFragment: false);

        MapView mapView = GetMapView();
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 }));
        await mapView.AddGraphic(new Graphic(new Point(100, 12),
            new SimpleMarkerSymbol(color: new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddPolyLineGraphicToViewInCode()
    {
        CreateViewRenderedHandler();
        AddMapRenderFragment(@<Map ArcGISDefaultBasemap="arcgis-imagery" />);
        await WaitForMapToRender(cleanupFragment: false);

        MapView mapView = GetMapView();
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polyline", 1 }));
        await mapView.AddGraphic(new Graphic(new PolyLine(_paths),
            new SimpleLineSymbol(new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));

        await WaitForMapToRender();
    }

    [TestMethod]
    public async Task TestCanAddPolygonGraphicToViewInCode()
    {
        CreateViewRenderedHandler();
        AddMapRenderFragment(@<Map ArcGISDefaultBasemap="arcgis-imagery" />);
        await WaitForMapToRender(cleanupFragment: false);

        MapView mapView = GetMapView();
        CreateViewRenderedHandler(() =>
            AssertJavaScript("assertGraphicExistsInView", args: new object[] { "polygon", 1 }));
        await mapView.AddGraphic(new Graphic(new Polygon(_rings),
            new SimpleFillSymbol(color: new MapColor("purple")),
            new PopupTemplate("title", "content"), _attributes));

        await WaitForMapToRender();
    }

    private readonly AttributesDictionary _attributes = new(new Dictionary<string, object>()
    {
        { "Name", "name" },
        { "Description", "description" }
    });

    private readonly MapPath[] _paths =
    {
        new()
        {
            new MapPoint(0, 0),
            new MapPoint(0, 1),
            new MapPoint(1, 1)
        }
    };

    private readonly MapPath[] _rings =
    {
        new()
        {
            new MapPoint(0, 0),
            new MapPoint(0, 1),
            new MapPoint(1, 1),
            new MapPoint(1, 0),
            new MapPoint(0, 0)
        }
    };
}