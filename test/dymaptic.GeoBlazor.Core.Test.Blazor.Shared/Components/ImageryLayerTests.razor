@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanRenderImageryLayerFromUrl(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <ImageryLayer @ref="layer"
                                  Url="https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"
                                  Opacity="0.6" />
                </Map>
            </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerFromUrl),
            layer!.Id, "url", "https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerFromUrl),
            layer!.Id, "opacity", 0.6);
    }
    
    [TestMethod]
    public async Task TestCanRenderImageryLayerFromPortalItem(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map>
                    <ImageryLayer @ref="layer" Title="Test Layer">
                        <PortalItem Id="fd61b9e0c69c4e14bebd50a9a968348c" />
                    </ImageryLayer>
                </Map>
            </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerFromPortalItem),
            layer!.Id, "portalItem.id", "fd61b9e0c69c4e14bebd50a9a968348c");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerFromPortalItem),
            layer!.Id, "title", "Test Layer");
    }

    [TestMethod]
    public async Task TestCanRenderImageryLayerCheckHeightValue(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <ImageryLayer @ref="layer" ImageMaxHeight=4100 ImageMaxWidth=5000 
                          Url="https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer"

                          />
        </Map>
    </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerCheckHeightValue),
            layer!.Id, "imageMaxHeight", 4100);

    }

    [TestMethod]
    public async Task TestCanRenderImageryLayerCheckAFullExtentValue(Action renderHandler)
    {
        ImageryLayer? layer = null;
        AddMapRenderFragment(
    @<MapView class="map-view" OnViewRendered="renderHandler">
        <Map>
            <ImageryLayer @ref="layer" 
                          Url="https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer" />
        </Map>
    </MapView>);
        await WaitForMapToRender();
        await AssertJavaScript("assertLayerExists", args: "imagery");
        await AssertJavaScript("assertObjectHasPropertyWithValue", nameof(TestCanRenderImageryLayerCheckAFullExtentValue),
            layer!.Id, "fullExtent.xmax", 2266845);

    }
}