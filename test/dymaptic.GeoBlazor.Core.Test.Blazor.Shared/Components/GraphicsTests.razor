@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanDeleteGraphicWithNewGeometry(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        var testGraphic = new Graphic(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await testGraphic.SetGeometry(new Point(1, 1));
        await mapView.RemoveGraphic(testGraphic);
    }

    [TestMethod]
    public async Task TestGraphicsAddedViaMarkupAreOnlyAddedOnce(Action renderHandler)
    {
        Graphic? graphic = null;
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery">
                    <GraphicsLayer @ref="graphicsLayer">
                        <Graphic @ref="graphic">
                            <Point X="0" Y="0" />
                        </Graphic>
                    </GraphicsLayer>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        Assert.AreEqual(1, graphicsLayer!.Graphics.Count);
        graphic!.Refresh();
        await AssertJavaScript("assertGraphicExistsInLayer", args: new object[] { graphicsLayer.Id, "point", 1 });
    }

    [TestMethod]
    public async Task TestCanAddGraphicsToRenderedMap(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        var testGraphic = new Graphic(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
    }
    
    [TestMethod]
    public async Task TestCanSerializeAndDeserializeGuidAttributes(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        Point point = new(0, 0);
        Guid testGuid = Guid.NewGuid();
        Graphic testGraphic = new Graphic(point,
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10),
            attributes: new AttributesDictionary(new Dictionary<string, object?>
            {
                {"GUID_ID", testGuid}
            }));
        await mapView!.AddGraphic(testGraphic);
        await Task.Yield();
        ScreenPoint screenPoint = await mapView.ToScreen(point);
        HitTestResult result = await mapView.HitTest(screenPoint);
        GraphicHit graphicHit = (GraphicHit)result.Results[0];
        Assert.AreEqual(testGuid, graphicHit.Graphic.Attributes["GUID_ID"]);
    }
}