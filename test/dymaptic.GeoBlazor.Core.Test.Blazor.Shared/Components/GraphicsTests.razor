@inherits TestRunnerBase

@{
    base.BuildRenderTree(__builder);
}

@code {

    [TestMethod]
    public async Task TestCanDeleteGraphicWithNewGeometry(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        var testGraphic = new Graphic(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await WaitForMapToRender();
        await testGraphic.SetGeometry(new Point(1, 1));
        await WaitForMapToRender();
        await mapView.RemoveGraphic(testGraphic);
    }

    [TestMethod]
    public async Task TestGraphicsAddedViaMarkupAreOnlyAddedOnce(Action renderHandler)
    {
        Graphic? graphic = null;
        GraphicsLayer? graphicsLayer = null;

        AddMapRenderFragment(
            @<MapView class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery">
                    <GraphicsLayer @ref="graphicsLayer">
                        <Graphic @ref="graphic">
                            <Point X="0" Y="0" />
                        </Graphic>
                    </GraphicsLayer>
                </Map>
            </MapView>);

        await WaitForMapToRender();
        Assert.AreEqual(1, graphicsLayer!.Graphics.Count);
        graphic!.Refresh();
        await AssertJavaScript("assertGraphicExistsInLayer", args: new object[] { graphicsLayer.Id, "point", 1 });
    }

    [TestMethod]
    public async Task TestCanAddGraphicsToRenderedMap(Action renderHandler)
    {
        MapView? mapView = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler">
                <Map ArcGISDefaultBasemap="arcgis-imagery" />
            </MapView>);

        await WaitForMapToRender();

        var testGraphic = new Graphic(new Point(0, 0),
            new SimpleMarkerSymbol(color: new MapColor("red"), size: 10));
        await mapView!.AddGraphic(testGraphic);
        await WaitForMapToRender();
        await AssertJavaScript("assertGraphicExistsInView", args: new object[] { "point", 1 });
    }
    
    [TestMethod]
    public async Task TestCanAddGraphicsToProgrammaticallyAddedLayer(Action renderHandler)
    {
        MapView? mapView = null;
        GraphicsLayer? graphicsLayer = null;
        AddMapRenderFragment( 
            @<MapView @ref="mapView" class="map-view" OnViewRendered="renderHandler"
                      Latitude="42.634261" Longitude="-73.746207">
                <Map ArcGISDefaultBasemap="arcgis-navigation">
                </Map>
                <ScaleBarWidget Position="OverlayPosition.BottomLeft" />
                <LayerListWidget Position="OverlayPosition.BottomRight" />
            </MapView>);

        await WaitForMapToRender();

        graphicsLayer = new GraphicsLayer(null, "Code First", 1.0, true, ListMode.Show);
        await mapView!.AddLayer(graphicsLayer);
        List<Point> points =
        [
            new Point(-73.70079, 42.75188),
            new Point(-73.70059, 42.74985),
            new Point(-73.70087, 42.74773),
            new Point(-73.70097, 42.74688),
            new Point(-73.70348, 42.74683),
            new Point(-73.70486, 42.74702),
            new Point(-73.70541, 42.7485),
            new Point(-73.70494, 42.75194),
            new Point(-73.70421, 42.75238),
            new Point(-73.70301, 42.75244),
            new Point(-73.70256, 42.75246),
            new Point(-73.70222, 42.75422),
            new Point(-73.70157, 42.75433),
            new Point(-73.70054, 42.75446),
            new Point(-73.70079, 42.75218)
        ];

        foreach (Point point in points)
        {
            SimpleMarkerSymbol symbol = new SimpleMarkerSymbol(new Outline(new MapColor("blue")),
                new MapColor("red"), 10);
            Graphic graphic = new Graphic(point, symbol);
            await graphicsLayer.Add(graphic);
        }
        
        await AssertJavaScript("assertGraphicExistsInLayer", args: [graphicsLayer.Id, "point", 15]);
    }
}