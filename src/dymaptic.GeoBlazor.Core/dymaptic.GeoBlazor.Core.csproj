<Project Sdk="Microsoft.NET.Sdk.Razor">

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <PackageId>dymaptic.GeoBlazor.Core</PackageId>
        <PackageTags>Blazor;ArcGIS;JsInterop;Javascript;Asp.NET</PackageTags>
        <Description>
            This package provides a Razor Component-based API for accessing ArcGIS maps, scenes, and data.
            It is a wrapper around the ArcGIS Javascript API - https://developers.arcgis.com/javascript/latest/
            For more information, contact dymaptic at info@dymaptic.com, or tim.purdum@dymaptic.com
        </Description>
        <Title>GeoBlazor</Title>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageVersion>1.1.1</PackageVersion>
        <Version>1.1.1</Version>
        <PackageVersion>1.1.1</PackageVersion>
        <Authors>Tim Purdum, Christopher Moravec</Authors>
        <Company>dymaptic</Company>
        <Copyright>Â©2022 by dymaptic</Copyright>
        <PackageReadmeFile>ReadMe.md</PackageReadmeFile>
        <RepositoryUrl>https://github.com/dymaptic/GeoBlazor</RepositoryUrl>
        <PackageProjectUrl>https://github.com/dymaptic/GeoBlazor</PackageProjectUrl>
        <RepositoryType>git</RepositoryType>
        <PackageIcon>Blazor-API-500px.png</PackageIcon>
        <GeneratePackageOnBuild Condition="$(Configuration) == 'RELEASE'">true</GeneratePackageOnBuild>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
    </PropertyGroup>

    <ItemGroup>
        <SupportedPlatform Include="browser" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DefaultDocumentation" Version="0.8.2" PrivateAssets="all" />
        <PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="6.0.6" />
        <PackageReference Include="Microsoft.Extensions.Configuration" Version="6.0.1" />
        <PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="6.0.0" />
    </ItemGroup>
    <PropertyGroup>
        <DefaultDocumentationFolder>Documentation</DefaultDocumentationFolder>
        <DefaultDocumentationGeneratedPages>Types</DefaultDocumentationGeneratedPages>
        <DefaultDocumentationGeneratedAccessModifiers>Public</DefaultDocumentationGeneratedAccessModifiers>
    </PropertyGroup>

    <ItemGroup>
        <None Include="Blazor-API-500px.png" Pack="true" PackagePath="" />
        <Content Remove="package.json" />
        <Content Remove="package-lock.json" />
        <Content Remove="tsconfig.json" />
        <Content Include="package.json" Pack="false" />
        <Content Include="package-lock.json" Pack="false" />
        <Content Include="tsconfig.json" Pack="false" />
        <None Include="Scripts/arcGisJsInterop.ts" Pack="true" PackagePack="Scripts" />
        <None Include="Scripts/definitions.d.ts" Pack="true" PackagePack="Scripts" />
        <None Include="Scripts/dotNetBuilder.ts" Pack="true" PackagePack="Scripts" />
        <None Include="Scripts/jsBuilder.ts" Pack="true" PackagePack="Scripts" />
        <None Include="Scripts/projection.ts" Pack="true" PackagePack="Scripts" />
        <None Remove="ReadMe.md" />
        <None Include="ReadMe.md" Pack="true" PackagePath="" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="wwwroot\assets" />
        <Folder Include="wwwroot\css" />
        <Folder Include="wwwroot\js" />
    </ItemGroup>

    <ItemGroup>
        <ReadMeSourceFile Include="../../ReadMe.md" />
    </ItemGroup>
    
    <Target Name="Copy Readme" AfterTargets="PreBuildEvent">
        <Message Importance="high" Text="Copying ReadMe" />
        <Copy SourceFiles="@(ReadMeSourceFile)" DestinationFolder="./" />
    </Target>

    <Target Name="Copy Assets" AfterTargets="PreBuildEvent" Condition="$(Configuration) == 'DEBUG'">
        <Message Importance="high" Text="Copying Asset files" />
        <ExecAsync FilePath="pwsh" Arguments="./assetCopy.ps1" />
    </Target>

    <Target Name="Copy Assets" AfterTargets="PreBuildEvent" Condition="$(Configuration) == 'RELEASE'">
        <Message Importance="high" Text="Copying Asset files" />
        <Exec Command="pwsh ./assetCopy.ps1" />
    </Target>

    <Target Name="NPM Debug Build" AfterTargets="PreBuildEvent" Condition="$(Configuration) == 'DEBUG'">
        <!-- Runs asynchronously to speed up build during development -->
        <Message Importance="high" Text="Launching Async NPM Build Script" />
        <ExecAsync FilePath="pwsh" Arguments="./npmDebugBuild.ps1" />
    </Target>
    
    <Target Name="NPM Release Build" AfterTargets="PreBuildEvent" Condition="$(Configuration) == 'RELEASE'">
        <!-- Runs synchronously to ensure all files are ready for nuget packaging in release mode -->
        <Exec Command="npm install &amp;&amp; npm run releaseBuild" />
    </Target>

    <Target Name="Copy Files" AfterTargets="Build">
        <Message Importance="high" Text="Launching Async File Copy Script" />
        <ExecAsync FilePath="pwsh" Arguments="./docCopy.ps1" ContinueOnError="true" />
    </Target>

    <!--Launch a Process in Parallel-->
    <UsingTask TaskName="ExecAsync" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <FilePath ParameterType="System.String" Required="true" />
            <Arguments ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Fragment" Language="cs">
                <![CDATA[ 
  System.Diagnostics.ProcessStartInfo processStartInfo = new System.Diagnostics.ProcessStartInfo(FilePath, Arguments);
  processStartInfo.UseShellExecute = true;
  System.Diagnostics.Process.Start(processStartInfo);
  ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
